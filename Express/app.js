const express = require("express"); // importar express

/*
Una vez tenemos importado express, tenemos acceso a una funci√≥n que nos premite crear una aplicacion de express.
Es la funci√≥n del mayor nivel que podemos tener para poder crear nuestra aplicaci√≥n de express.

*/

const app = express();
/*
tomamos express(), llamando a esa funci√≥n y eso retorna una aplicaci√≥n de express (app) que es de tipo express.
Con esto ya tensmo nuestra aplicacion de express.
Ya podr√©mos empezar a definir nuestras rutas.
Normalmente trabajar√≠amos con una BBDD.

En este caso simularemos una base de datos con el archivo de cursos.js. y lo importaremos usando la sintaxis de desestructuracion para importar solo infoCursos del archivo cursos.js
*/

const { infoCursos } = require("./cursos.js"); //agregamos ./ a la ruta para decirle a node que este no es un modulo core de los principales de node. si no le ponemos ./ tratar√° de conseguir en uno de los m√≥dulos que ya viene instalado en node o uno de los que hemos instalado nosotros (por eso exress no tiene ./express)

console.log(infoCursos); // muestra los datos de los cursos
console.log(typeof infoCursos); // es un objeto

/*
ROUTING -- Implementacion de las rutas -- 
lo haremos a trav√©s de la app. objeto de express a trav√©s de su m√©todo .get();
app.M√âTODOhttp("ruta", funcion (req, res)=>{})

*/

app.get("/", (req, res) => {
  res.setHeader("Content-Type", "text/html; charset=utf-8");
  res.end("Mi primer servidor con Express. Cursos üòä");
});

// Es decir, no hace falta usar condicionales para cada tipo de solicitud, en este caso implementamos esta para solicitudes get que vayan a la ruta principal /
// Hay que indicarle a traves de la app en que puerto va a escuchar.

const PUERTO = process.env.PORT || 3000;
app.listen(PUERTO, () => {
  // funcion que se llama cuando el servidor comience a escuchar
  console.log(`El servidor esta escuchando por el puerto ${PUERTO}`);
});

/* Cuando est√© desarrollando la aplicacion yo puedo colocar un puerto espec√≠fico, por ejemplo el 3000, pero cuando estes en un ambiente real, si ya estas publicando la aplicacion en un servicio de hosting, el puerto se te va a asignar a la aplicacion. Quiz√° sea uno que se me asigne de forma din√°mica.
 En ese caso para tomar ese puerto de esas variables de ambiente que configura el servicio que estoy solicitando por tener mi aplicacion en vivo puedo usar;
 process.env.PORT || 3000  -- Esto va a conseguir el valor del puerto si est√° definido como una variable en el ambiente donde se esta ejecutando esa aplicacion de node, en caso contrario se asigna el pueto 3000
 Esto es importante porque si no la aplicacion no va a funcionar si la subo a un servicio en el que me proveen un puerto y yo tengo configurado otro
*/
